
Maker_MiniatureHomeControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005288  08005288  00006288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c8  080052c8  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052c8  080052c8  000062c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d0  080052d0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080052d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  2000000c  080052e4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080052e4  00007424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158f1  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f51  00000000  00000000  0001c92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0001f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  00020b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e01  00000000  00000000  00021a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017439  00000000  00000000  0004886d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faecc  00000000  00000000  0005fca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ab72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd0  00000000  00000000  0015abb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0015fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005270 	.word	0x08005270

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005270 	.word	0x08005270

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <MX_DMA_Init+0x50>)
 800054c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <MX_DMA_Init+0x50>)
 8000550:	f043 0304 	orr.w	r3, r3, #4
 8000554:	6493      	str	r3, [r2, #72]	@ 0x48
 8000556:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <MX_DMA_Init+0x50>)
 8000558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800055a:	f003 0304 	and.w	r3, r3, #4
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <MX_DMA_Init+0x50>)
 8000564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000566:	4a0b      	ldr	r2, [pc, #44]	@ (8000594 <MX_DMA_Init+0x50>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6493      	str	r3, [r2, #72]	@ 0x48
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <MX_DMA_Init+0x50>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	200b      	movs	r0, #11
 8000580:	f001 f96b 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000584:	200b      	movs	r0, #11
 8000586:	f001 f982 	bl	800188e <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b28      	ldr	r3, [pc, #160]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a27      	ldr	r2, [pc, #156]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ba:	4b25      	ldr	r3, [pc, #148]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_GPIO_Init+0xb8>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI_DC_Pin|SPI_RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80005fc:	4815      	ldr	r0, [pc, #84]	@ (8000654 <MX_GPIO_Init+0xbc>)
 80005fe:	f001 fc9d 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2170      	movs	r1, #112	@ 0x70
 8000606:	4814      	ldr	r0, [pc, #80]	@ (8000658 <MX_GPIO_Init+0xc0>)
 8000608:	f001 fc98 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_DC_Pin SPI_RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_DC_Pin|SPI_RST_Pin|SPI_CS_Pin;
 800060c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	480b      	ldr	r0, [pc, #44]	@ (8000654 <MX_GPIO_Init+0xbc>)
 8000626:	f001 fb07 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800062a:	2370      	movs	r3, #112	@ 0x70
 800062c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_GPIO_Init+0xc0>)
 8000642:	f001 faf9 	bl	8001c38 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	48000800 	.word	0x48000800
 8000658:	48000400 	.word	0x48000400

0800065c <waitNms>:
		0x00FFFF,
		0x0000FF,
		0xFF00FF,
};

void waitNms(unsigned int n) {
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    // Boucle pour chaque milliseconde
    for (unsigned int i = 0; i < n; i++) {
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e00d      	b.n	8000686 <waitNms+0x2a>
        // À 16 MHz, 1 ms = 16000 cycles
        // Supposons que le corps de la boucle prend ~4 cycles
        // => Il faut environ 4000 itérations pour 1 ms
        for (unsigned int j = 0; j < 4000; j++) {
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	e003      	b.n	8000678 <waitNms+0x1c>
            __asm__("nop"); // NOP : 1 cycle
 8000670:	bf00      	nop
        for (unsigned int j = 0; j < 4000; j++) {
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	3301      	adds	r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800067e:	d3f7      	bcc.n	8000670 <waitNms+0x14>
    for (unsigned int i = 0; i < n; i++) {
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d3ed      	bcc.n	800066a <waitNms+0xe>
        }
    }
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f000 ff8e 	bl	80015c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f82f 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006aa:	f7ff ff75 	bl	8000598 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ae:	f7ff ff49 	bl	8000544 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006b2:	f000 fd51 	bl	8001158 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80006b6:	f000 f96f 	bl	8000998 <MX_SPI1_Init>
  MX_TIM1_Init();
 80006ba:	f000 fa5d 	bl	8000b78 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006be:	f000 fb2f 	bl	8000d20 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006c2:	f000 fb85 	bl	8000dd0 <MX_TIM3_Init>
  MX_UART4_Init();
 80006c6:	f000 fcfb 	bl	80010c0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80006ca:	f000 fd91 	bl	80011f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006ce:	f000 fddb 	bl	8001288 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  h_servo_t servo1;
  servoInit(&servo1,&htim1,TIM_CHANNEL_4);
 80006d2:	463b      	mov	r3, r7
 80006d4:	220c      	movs	r2, #12
 80006d6:	490b      	ldr	r1, [pc, #44]	@ (8000704 <main+0x68>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f85b 	bl	8000794 <servoInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  turnServo(&servo1);
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f8bc 	bl	800085e <turnServo>
	  waitNms(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ea:	f7ff ffb7 	bl	800065c <waitNms>
	  //HAL_Delay(1000);
	  turnServo(&servo1);
 80006ee:	463b      	mov	r3, r7
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f8b4 	bl	800085e <turnServo>
	  waitNms(1000);
 80006f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fa:	f7ff ffaf 	bl	800065c <waitNms>
	  turnServo(&servo1);
 80006fe:	bf00      	nop
 8000700:	e7ed      	b.n	80006de <main+0x42>
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2238      	movs	r2, #56	@ 0x38
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fd7e 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800072e:	f001 fc1d 	bl	8001f6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000732:	2302      	movs	r3, #2
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000736:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2340      	movs	r3, #64	@ 0x40
 800073e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000740:	2300      	movs	r3, #0
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0318 	add.w	r3, r7, #24
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fcc3 	bl	80020d4 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000754:	f000 f818 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075c:	2301      	movs	r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ffc1 	bl	80026f8 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800077c:	f000 f804 	bl	8000788 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	@ 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <servoInit>:
 *      Author: administrateur
 */

#include "servos.h"

void servoInit(h_servo_t *servoHandle, TIM_HandleTypeDef *timer, uint32_t timerChannel) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	servoHandle->timer = timer;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	601a      	str	r2, [r3, #0]
	servoHandle->timerChannel = timerChannel;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	605a      	str	r2, [r3, #4]
	servoHandle->pos0 = 500;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80007b2:	811a      	strh	r2, [r3, #8]
	servoHandle->pos1 = 850;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f240 3252 	movw	r2, #850	@ 0x352
 80007ba:	815a      	strh	r2, [r3, #10]
	HAL_TIM_PWM_Start(servoHandle->timer, servoHandle->timerChannel);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f002 fd5a 	bl	8003280 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(servoHandle->timer, servoHandle->timerChannel, servoHandle->pos0);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d106      	bne.n	80007e2 <servoInit+0x4e>
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	891a      	ldrh	r2, [r3, #8]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e0:	e036      	b.n	8000850 <servoInit+0xbc>
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d107      	bne.n	80007fa <servoInit+0x66>
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	8919      	ldrh	r1, [r3, #8]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	460b      	mov	r3, r1
 80007f6:	6393      	str	r3, [r2, #56]	@ 0x38
 80007f8:	e02a      	b.n	8000850 <servoInit+0xbc>
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b08      	cmp	r3, #8
 8000800:	d107      	bne.n	8000812 <servoInit+0x7e>
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	8919      	ldrh	r1, [r3, #8]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	460b      	mov	r3, r1
 800080e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000810:	e01e      	b.n	8000850 <servoInit+0xbc>
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b0c      	cmp	r3, #12
 8000818:	d107      	bne.n	800082a <servoInit+0x96>
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	8919      	ldrh	r1, [r3, #8]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	460b      	mov	r3, r1
 8000826:	6413      	str	r3, [r2, #64]	@ 0x40
 8000828:	e012      	b.n	8000850 <servoInit+0xbc>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b10      	cmp	r3, #16
 8000830:	d107      	bne.n	8000842 <servoInit+0xae>
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	8919      	ldrh	r1, [r3, #8]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	460b      	mov	r3, r1
 800083e:	6493      	str	r3, [r2, #72]	@ 0x48
 8000840:	e006      	b.n	8000850 <servoInit+0xbc>
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	8919      	ldrh	r1, [r3, #8]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	460b      	mov	r3, r1
 800084e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	servoHandle->currentPos = 0;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <turnServo>:

void turnServo(h_servo_t *servoHandle) {
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	if (servoHandle->currentPos == 0) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d141      	bne.n	80008f2 <turnServo+0x94>
		__HAL_TIM_SET_COMPARE(servoHandle->timer, servoHandle->timerChannel, servoHandle->pos1);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d106      	bne.n	8000884 <turnServo+0x26>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	895a      	ldrh	r2, [r3, #10]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
 8000882:	e036      	b.n	80008f2 <turnServo+0x94>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	2b04      	cmp	r3, #4
 800088a:	d107      	bne.n	800089c <turnServo+0x3e>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	8959      	ldrh	r1, [r3, #10]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	460b      	mov	r3, r1
 8000898:	6393      	str	r3, [r2, #56]	@ 0x38
 800089a:	e02a      	b.n	80008f2 <turnServo+0x94>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d107      	bne.n	80008b4 <turnServo+0x56>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	8959      	ldrh	r1, [r3, #10]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	460b      	mov	r3, r1
 80008b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008b2:	e01e      	b.n	80008f2 <turnServo+0x94>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b0c      	cmp	r3, #12
 80008ba:	d107      	bne.n	80008cc <turnServo+0x6e>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	8959      	ldrh	r1, [r3, #10]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	460b      	mov	r3, r1
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ca:	e012      	b.n	80008f2 <turnServo+0x94>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b10      	cmp	r3, #16
 80008d2:	d107      	bne.n	80008e4 <turnServo+0x86>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	8959      	ldrh	r1, [r3, #10]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	460b      	mov	r3, r1
 80008e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80008e2:	e006      	b.n	80008f2 <turnServo+0x94>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	8959      	ldrh	r1, [r3, #10]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	460b      	mov	r3, r1
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	}
	if (servoHandle->currentPos == 1) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d141      	bne.n	800097e <turnServo+0x120>
		__HAL_TIM_SET_COMPARE(servoHandle->timer, servoHandle->timerChannel, servoHandle->pos0);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d106      	bne.n	8000910 <turnServo+0xb2>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	891a      	ldrh	r2, [r3, #8]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	635a      	str	r2, [r3, #52]	@ 0x34
 800090e:	e036      	b.n	800097e <turnServo+0x120>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b04      	cmp	r3, #4
 8000916:	d107      	bne.n	8000928 <turnServo+0xca>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	8919      	ldrh	r1, [r3, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	460b      	mov	r3, r1
 8000924:	6393      	str	r3, [r2, #56]	@ 0x38
 8000926:	e02a      	b.n	800097e <turnServo+0x120>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	2b08      	cmp	r3, #8
 800092e:	d107      	bne.n	8000940 <turnServo+0xe2>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	8919      	ldrh	r1, [r3, #8]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	460b      	mov	r3, r1
 800093c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800093e:	e01e      	b.n	800097e <turnServo+0x120>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b0c      	cmp	r3, #12
 8000946:	d107      	bne.n	8000958 <turnServo+0xfa>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	8919      	ldrh	r1, [r3, #8]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	460b      	mov	r3, r1
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	e012      	b.n	800097e <turnServo+0x120>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b10      	cmp	r3, #16
 800095e:	d107      	bne.n	8000970 <turnServo+0x112>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	8919      	ldrh	r1, [r3, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	460b      	mov	r3, r1
 800096c:	6493      	str	r3, [r2, #72]	@ 0x48
 800096e:	e006      	b.n	800097e <turnServo+0x120>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	8919      	ldrh	r1, [r3, #8]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	}
	servoHandle->currentPos = 1 - servoHandle->currentPos;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	f1c3 0201 	rsb	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60da      	str	r2, [r3, #12]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_SPI1_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_SPI1_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80009b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009f4:	2208      	movs	r2, #8
 80009f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_SPI1_Init+0x74>)
 80009fa:	f002 fae7 	bl	8002fcc <HAL_SPI_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000a04:	f7ff fec0 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000028 	.word	0x20000028
 8000a10:	40013000 	.word	0x40013000

08000a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <HAL_SPI_MspInit+0x7c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d128      	bne.n	8000a88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_SPI_MspInit+0x80>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a3a:	4a16      	ldr	r2, [pc, #88]	@ (8000a94 <HAL_SPI_MspInit+0x80>)
 8000a3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_SPI_MspInit+0x80>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_SPI_MspInit+0x80>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a52:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <HAL_SPI_MspInit+0x80>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_SPI_MspInit+0x80>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a66:	23a0      	movs	r3, #160	@ 0xa0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a76:	2305      	movs	r3, #5
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f001 f8d8 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	@ 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40013000 	.word	0x40013000
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000adc <HAL_MspInit+0x44>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ace:	f001 faf1 	bl	80020b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <MemManage_Handler+0x4>

08000af8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b36:	f000 fd97 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <DMA1_Channel1_IRQHandler+0x10>)
 8000b46:	f000 ff65 	bl	8001a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000170 	.word	0x20000170

08000b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim2_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b09c      	sub	sp, #112	@ 0x70
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]
 8000baa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2234      	movs	r2, #52	@ 0x34
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f004 fb30 	bl	8005218 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb8:	4b57      	ldr	r3, [pc, #348]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000bba:	4a58      	ldr	r2, [pc, #352]	@ (8000d1c <MX_TIM1_Init+0x1a4>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 8000bbe:	4b56      	ldr	r3, [pc, #344]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000bc0:	221f      	movs	r2, #31
 8000bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b54      	ldr	r3, [pc, #336]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000bca:	4b53      	ldr	r3, [pc, #332]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000bcc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd2:	4b51      	ldr	r3, [pc, #324]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b4e      	ldr	r3, [pc, #312]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000be4:	484c      	ldr	r0, [pc, #304]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000be6:	f002 fa9c 	bl	8003122 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f7ff fdca 	bl	8000788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4845      	ldr	r0, [pc, #276]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000c02:	f002 fd63 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c0c:	f7ff fdbc 	bl	8000788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c10:	4841      	ldr	r0, [pc, #260]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000c12:	f002 fadd 	bl	80031d0 <HAL_TIM_PWM_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c1c:	f7ff fdb4 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c30:	4619      	mov	r1, r3
 8000c32:	4839      	ldr	r0, [pc, #228]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000c34:	f003 fb00 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c3e:	f7ff fda3 	bl	8000788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c42:	2360      	movs	r3, #96	@ 0x60
 8000c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c62:	2200      	movs	r2, #0
 8000c64:	4619      	mov	r1, r3
 8000c66:	482c      	ldr	r0, [pc, #176]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000c68:	f002 fc1c 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c72:	f7ff fd89 	bl	8000788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4826      	ldr	r0, [pc, #152]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000c80:	f002 fc10 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c8a:	f7ff fd7d 	bl	8000788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c92:	2208      	movs	r2, #8
 8000c94:	4619      	mov	r1, r3
 8000c96:	4820      	ldr	r0, [pc, #128]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000c98:	f002 fc04 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000ca2:	f7ff fd71 	bl	8000788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ca6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000caa:	220c      	movs	r2, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	481a      	ldr	r0, [pc, #104]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000cb0:	f002 fbf8 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000cba:	f7ff fd65 	bl	8000788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ce4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000cfc:	f003 fb32 	bl	8004364 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 8000d06:	f7ff fd3f 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d0a:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <MX_TIM1_Init+0x1a0>)
 8000d0c:	f000 f958 	bl	8000fc0 <HAL_TIM_MspPostInit>

}
 8000d10:	bf00      	nop
 8000d12:	3770      	adds	r7, #112	@ 0x70
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000008c 	.word	0x2000008c
 8000d1c:	40012c00 	.word	0x40012c00

08000d20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	615a      	str	r2, [r3, #20]
 8000d42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d5a:	2213      	movs	r2, #19
 8000d5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d6a:	4818      	ldr	r0, [pc, #96]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d6c:	f002 fa30 	bl	80031d0 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000d76:	f7ff fd07 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4810      	ldr	r0, [pc, #64]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000d8a:	f003 fa55 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d94:	f7ff fcf8 	bl	8000788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d98:	2360      	movs	r3, #96	@ 0x60
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2204      	movs	r2, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000db0:	f002 fb78 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000dba:	f7ff fce5 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dbe:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <MX_TIM2_Init+0xac>)
 8000dc0:	f000 f8fe 	bl	8000fc0 <HAL_TIM_MspPostInit>

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	@ 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000d8 	.word	0x200000d8

08000dd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	@ 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	615a      	str	r2, [r3, #20]
 8000e00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e04:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <MX_TIM3_Init+0xec>)
 8000e06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e08:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b25      	ldr	r3, [pc, #148]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e28:	4823      	ldr	r0, [pc, #140]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e2a:	f002 f97a 	bl	8003122 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e34:	f7ff fca8 	bl	8000788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e42:	4619      	mov	r1, r3
 8000e44:	481c      	ldr	r0, [pc, #112]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e46:	f002 fc41 	bl	80036cc <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e50:	f7ff fc9a 	bl	8000788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e54:	4818      	ldr	r0, [pc, #96]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e56:	f002 f9bb 	bl	80031d0 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e60:	f7ff fc92 	bl	8000788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e74:	f003 f9e0 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e7e:	f7ff fc83 	bl	8000788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	@ 0x60
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e9a:	f002 fb03 	bl	80034a4 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ea4:	f7ff fc70 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ea8:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <MX_TIM3_Init+0xe8>)
 8000eaa:	f000 f889 	bl	8000fc0 <HAL_TIM_MspPostInit>

}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	@ 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000124 	.word	0x20000124
 8000ebc:	40000400 	.word	0x40000400

08000ec0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <HAL_TIM_Base_MspInit+0x5c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d10c      	bne.n	8000eec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <HAL_TIM_Base_MspInit+0x60>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <HAL_TIM_Base_MspInit+0x60>)
 8000ed8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000edc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HAL_TIM_Base_MspInit+0x60>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000eea:	e010      	b.n	8000f0e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <HAL_TIM_Base_MspInit+0x64>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10b      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_TIM_Base_MspInit+0x60>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	4a09      	ldr	r2, [pc, #36]	@ (8000f20 <HAL_TIM_Base_MspInit+0x60>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <HAL_TIM_Base_MspInit+0x60>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40012c00 	.word	0x40012c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40000400 	.word	0x40000400

08000f28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f38:	d137      	bne.n	8000faa <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel1;
 8000f52:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <HAL_TIM_PWM_MspInit+0x94>)
 8000f56:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_TIM2_CH2;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f5a:	2239      	movs	r2, #57	@ 0x39
 8000f5c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f60:	2210      	movs	r2, #16
 8000f62:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f76:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_NORMAL;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f88:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000f8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 8000f8e:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000f90:	f000 fc98 	bl	80018c4 <HAL_DMA_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 8000f9a:	f7ff fbf5 	bl	8000788 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	20000170 	.word	0x20000170
 8000fbc:	40020008 	.word	0x40020008

08000fc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a34      	ldr	r2, [pc, #208]	@ (80010b0 <HAL_TIM_MspPostInit+0xf0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d11c      	bne.n	800101c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	4a33      	ldr	r2, [pc, #204]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fee:	4b31      	ldr	r3, [pc, #196]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin|TIM1_CH2_Pin|TIM1_CH3_Pin|TIM1_CH4_Pin;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800100a:	2302      	movs	r3, #2
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4828      	ldr	r0, [pc, #160]	@ (80010b8 <HAL_TIM_MspPostInit+0xf8>)
 8001016:	f000 fe0f 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800101a:	e044      	b.n	80010a6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001024:	d11d      	bne.n	8001062 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001032:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM2_CH2_Pin;
 800103e:	2302      	movs	r3, #2
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800104e:	2301      	movs	r3, #1
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM2_CH2_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105c:	f000 fdec 	bl	8001c38 <HAL_GPIO_Init>
}
 8001060:	e021      	b.n	80010a6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <HAL_TIM_MspPostInit+0xfc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d11c      	bne.n	80010a6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <HAL_TIM_MspPostInit+0xf4>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM3_CH1_Pin;
 8001084:	2340      	movs	r3, #64	@ 0x40
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001094:	2302      	movs	r3, #2
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a2:	f000 fdc9 	bl	8001c38 <HAL_GPIO_Init>
}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	@ 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40012c00 	.word	0x40012c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000800 	.word	0x48000800
 80010bc:	40000400 	.word	0x40000400

080010c0 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_UART4_Init+0x90>)
 80010c6:	4a23      	ldr	r2, [pc, #140]	@ (8001154 <MX_UART4_Init+0x94>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <MX_UART4_Init+0x90>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <MX_UART4_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <MX_UART4_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_UART4_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_UART4_Init+0x90>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <MX_UART4_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <MX_UART4_Init+0x90>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <MX_UART4_Init+0x90>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_UART4_Init+0x90>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MX_UART4_Init+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001108:	4811      	ldr	r0, [pc, #68]	@ (8001150 <MX_UART4_Init+0x90>)
 800110a:	f003 f9bf 	bl	800448c <HAL_UART_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001114:	f7ff fb38 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_UART4_Init+0x90>)
 800111c:	f003 ffb2 	bl	8005084 <HAL_UARTEx_SetTxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001126:	f7ff fb2f 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112a:	2100      	movs	r1, #0
 800112c:	4808      	ldr	r0, [pc, #32]	@ (8001150 <MX_UART4_Init+0x90>)
 800112e:	f003 ffe7 	bl	8005100 <HAL_UARTEx_SetRxFifoThreshold>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001138:	f7ff fb26 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <MX_UART4_Init+0x90>)
 800113e:	f003 ff68 	bl	8005012 <HAL_UARTEx_DisableFifoMode>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001148:	f7ff fb1e 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200001d0 	.word	0x200001d0
 8001154:	40004c00 	.word	0x40004c00

08001158 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_USART1_UART_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 80011a2:	f003 f973 	bl	800448c <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f7ff faec 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 80011b4:	f003 ff66 	bl	8005084 <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f7ff fae3 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 80011c6:	f003 ff9b 	bl	8005100 <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f7ff fada 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_USART1_UART_Init+0x90>)
 80011d6:	f003 ff1c 	bl	8005012 <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f7ff fad2 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000264 	.word	0x20000264
 80011ec:	40013800 	.word	0x40013800

080011f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	@ (8001284 <MX_USART2_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 800123a:	f003 f977 	bl	800452c <HAL_HalfDuplex_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f7ff faa0 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 800124c:	f003 ff1a 	bl	8005084 <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f7ff fa97 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 800125e:	f003 ff4f 	bl	8005100 <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f7ff fa8e 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_USART2_UART_Init+0x90>)
 800126e:	f003 fed0 	bl	8005012 <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f7ff fa86 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200002f8 	.word	0x200002f8
 8001284:	40004400 	.word	0x40004400

08001288 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 800128e:	4a23      	ldr	r2, [pc, #140]	@ (800131c <MX_USART3_UART_Init+0x94>)
 8001290:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001292:	4b21      	ldr	r3, [pc, #132]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 8001294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001298:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800129a:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d0:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012d2:	f003 f8db 	bl	800448c <HAL_UART_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012dc:	f7ff fa54 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	480d      	ldr	r0, [pc, #52]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012e4:	f003 fece 	bl	8005084 <HAL_UARTEx_SetTxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012ee:	f7ff fa4b 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 80012f6:	f003 ff03 	bl	8005100 <HAL_UARTEx_SetRxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001300:	f7ff fa42 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	@ (8001318 <MX_USART3_UART_Init+0x90>)
 8001306:	f003 fe84 	bl	8005012 <HAL_UARTEx_DisableFifoMode>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001310:	f7ff fa3a 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000038c 	.word	0x2000038c
 800131c:	40004800 	.word	0x40004800

08001320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0a4      	sub	sp, #144	@ 0x90
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800133c:	2254      	movs	r2, #84	@ 0x54
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f003 ff69 	bl	8005218 <memset>
  if(uartHandle->Instance==UART4)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a82      	ldr	r2, [pc, #520]	@ (8001554 <HAL_UART_MspInit+0x234>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d13b      	bne.n	80013c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001350:	2308      	movs	r3, #8
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fbe7 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001368:	f7ff fa0e 	bl	8000788 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800136c:	4b7a      	ldr	r3, [pc, #488]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001370:	4a79      	ldr	r2, [pc, #484]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001372:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001376:	6593      	str	r3, [r2, #88]	@ 0x58
 8001378:	4b77      	ldr	r3, [pc, #476]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001384:	4b74      	ldr	r3, [pc, #464]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	4a73      	ldr	r2, [pc, #460]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001390:	4b71      	ldr	r3, [pc, #452]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 800139c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80013b4:	2305      	movs	r3, #5
 80013b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013be:	4619      	mov	r1, r3
 80013c0:	4866      	ldr	r0, [pc, #408]	@ (800155c <HAL_UART_MspInit+0x23c>)
 80013c2:	f000 fc39 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013c6:	e0c0      	b.n	800154a <HAL_UART_MspInit+0x22a>
  else if(uartHandle->Instance==USART1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a64      	ldr	r2, [pc, #400]	@ (8001560 <HAL_UART_MspInit+0x240>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d13a      	bne.n	8001448 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fba6 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013ea:	f7ff f9cd 	bl	8000788 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001558 <HAL_UART_MspInit+0x238>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013f2:	4a59      	ldr	r2, [pc, #356]	@ (8001558 <HAL_UART_MspInit+0x238>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013fa:	4b57      	ldr	r3, [pc, #348]	@ (8001558 <HAL_UART_MspInit+0x238>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b54      	ldr	r3, [pc, #336]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a53      	ldr	r2, [pc, #332]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800141e:	2330      	movs	r3, #48	@ 0x30
 8001420:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001434:	2307      	movs	r3, #7
 8001436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800143e:	4619      	mov	r1, r3
 8001440:	4846      	ldr	r0, [pc, #280]	@ (800155c <HAL_UART_MspInit+0x23c>)
 8001442:	f000 fbf9 	bl	8001c38 <HAL_GPIO_Init>
}
 8001446:	e080      	b.n	800154a <HAL_UART_MspInit+0x22a>
  else if(uartHandle->Instance==USART2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a45      	ldr	r2, [pc, #276]	@ (8001564 <HAL_UART_MspInit+0x244>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d13b      	bne.n	80014ca <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fb66 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0x14e>
      Error_Handler();
 800146a:	f7ff f98d 	bl	8000788 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800146e:	4b3a      	ldr	r3, [pc, #232]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	4a39      	ldr	r2, [pc, #228]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001478:	6593      	str	r3, [r2, #88]	@ 0x58
 800147a:	4b37      	ldr	r3, [pc, #220]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b34      	ldr	r3, [pc, #208]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a33      	ldr	r2, [pc, #204]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800149e:	2304      	movs	r3, #4
 80014a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b4:	2307      	movs	r3, #7
 80014b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c4:	f000 fbb8 	bl	8001c38 <HAL_GPIO_Init>
}
 80014c8:	e03f      	b.n	800154a <HAL_UART_MspInit+0x22a>
  else if(uartHandle->Instance==USART3)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a26      	ldr	r2, [pc, #152]	@ (8001568 <HAL_UART_MspInit+0x248>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d13a      	bne.n	800154a <HAL_UART_MspInit+0x22a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014d4:	2304      	movs	r3, #4
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014d8:	2300      	movs	r3, #0
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fb25 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 80014ec:	f7ff f94c 	bl	8000788 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_UART_MspInit+0x238>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <HAL_UART_MspInit+0x238>)
 80014f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <HAL_UART_MspInit+0x238>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001500:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150c:	4a12      	ldr	r2, [pc, #72]	@ (8001558 <HAL_UART_MspInit+0x238>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001514:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <HAL_UART_MspInit+0x238>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8001520:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001524:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001538:	2307      	movs	r3, #7
 800153a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001542:	4619      	mov	r1, r3
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <HAL_UART_MspInit+0x24c>)
 8001546:	f000 fb77 	bl	8001c38 <HAL_GPIO_Init>
}
 800154a:	bf00      	nop
 800154c:	3790      	adds	r7, #144	@ 0x90
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40004c00 	.word	0x40004c00
 8001558:	40021000 	.word	0x40021000
 800155c:	48000800 	.word	0x48000800
 8001560:	40013800 	.word	0x40013800
 8001564:	40004400 	.word	0x40004400
 8001568:	40004800 	.word	0x40004800
 800156c:	48000400 	.word	0x48000400

08001570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001572:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001574:	f7ff faee 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	@ (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159e:	f003 fe43 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015a2:	f7ff f87b 	bl	800069c <main>

080015a6 <LoopForever>:

LoopForever:
    b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   r0, =_estack
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015b4:	080052d8 	.word	0x080052d8
  ldr r2, =_sbss
 80015b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015bc:	20000424 	.word	0x20000424

080015c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_2_IRQHandler>

080015c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f939 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f80e 	bl	80015f4 <HAL_InitTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	e001      	b.n	80015e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015e4:	f7ff fa58 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015e8:	79fb      	ldrb	r3, [r7, #7]

}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_InitTick+0x68>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d022      	beq.n	800164e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <HAL_InitTick+0x6c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <HAL_InitTick+0x68>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001614:	fbb1 f3f3 	udiv	r3, r1, r3
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f944 	bl	80018aa <HAL_SYSTICK_Config>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10f      	bne.n	8001648 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	d809      	bhi.n	8001642 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162e:	2200      	movs	r2, #0
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001636:	f000 f910 	bl	800185a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800163a:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <HAL_InitTick+0x70>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e007      	b.n	8001652 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e004      	b.n	8001652 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e001      	b.n	8001652 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000008 	.word	0x20000008
 8001660:	20000000 	.word	0x20000000
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HAL_IncTick+0x1c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_IncTick+0x20>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4413      	add	r3, r2
 8001676:	4a03      	ldr	r2, [pc, #12]	@ (8001684 <HAL_IncTick+0x1c>)
 8001678:	6013      	str	r3, [r2, #0]
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	20000420 	.word	0x20000420
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000420 	.word	0x20000420

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	@ (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	@ (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff29 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff40 	bl	80016ec <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff33 	bl	8001708 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa4 	bl	8001800 <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e08d      	b.n	80019f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b47      	ldr	r3, [pc, #284]	@ (80019fc <HAL_DMA_Init+0x138>)
 80018de:	429a      	cmp	r2, r3
 80018e0:	d80f      	bhi.n	8001902 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b45      	ldr	r3, [pc, #276]	@ (8001a00 <HAL_DMA_Init+0x13c>)
 80018ea:	4413      	add	r3, r2
 80018ec:	4a45      	ldr	r2, [pc, #276]	@ (8001a04 <HAL_DMA_Init+0x140>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	009a      	lsls	r2, r3, #2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_DMA_Init+0x144>)
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001900:	e00e      	b.n	8001920 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b40      	ldr	r3, [pc, #256]	@ (8001a0c <HAL_DMA_Init+0x148>)
 800190a:	4413      	add	r3, r2
 800190c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a04 <HAL_DMA_Init+0x140>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	009a      	lsls	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a3c      	ldr	r2, [pc, #240]	@ (8001a10 <HAL_DMA_Init+0x14c>)
 800191e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800193a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8fe 	bl	8001b74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001980:	d102      	bne.n	8001988 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800199c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d010      	beq.n	80019c8 <HAL_DMA_Init+0x104>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d80c      	bhi.n	80019c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f91e 	bl	8001bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	e008      	b.n	80019da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40020407 	.word	0x40020407
 8001a00:	bffdfff8 	.word	0xbffdfff8
 8001a04:	cccccccd 	.word	0xcccccccd
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	bffdfbf8 	.word	0xbffdfbf8
 8001a10:	40020400 	.word	0x40020400

08001a14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	2204      	movs	r2, #4
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d026      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x7a>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d021      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0204 	bic.w	r2, r2, #4
 8001a66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	2104      	movs	r1, #4
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d071      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a8c:	e06c      	b.n	8001b68 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	2202      	movs	r2, #2
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d02e      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d029      	beq.n	8001b00 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 020a 	bic.w	r2, r2, #10
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	f003 021f 	and.w	r2, r3, #31
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	2102      	movs	r1, #2
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d038      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001afe:	e033      	b.n	8001b68 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	2208      	movs	r2, #8
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d02a      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d025      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 020e 	bic.w	r2, r2, #14
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f003 021f 	and.w	r2, r3, #31
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
}
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d802      	bhi.n	8001b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b88:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e001      	b.n	8001b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b08      	subs	r3, #8
 8001b9e:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	009a      	lsls	r2, r3, #2
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 031f 	and.w	r3, r3, #31
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40020407 	.word	0x40020407
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020820 	.word	0x40020820
 8001be8:	cccccccd 	.word	0xcccccccd
 8001bec:	40020880 	.word	0x40020880

08001bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	1000823f 	.word	0x1000823f
 8001c34:	40020940 	.word	0x40020940

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c46:	e15a      	b.n	8001efe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 814c 	beq.w	8001ef8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d130      	bne.n	8001cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0201 	and.w	r2, r3, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d017      	beq.n	8001d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d123      	bne.n	8001d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	6939      	ldr	r1, [r7, #16]
 8001d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0203 	and.w	r2, r3, #3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a6 	beq.w	8001ef8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dac:	4b5b      	ldr	r3, [pc, #364]	@ (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db8:	4b58      	ldr	r3, [pc, #352]	@ (8001f1c <HAL_GPIO_Init+0x2e4>)
 8001dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc4:	4a56      	ldr	r2, [pc, #344]	@ (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dee:	d01f      	beq.n	8001e30 <HAL_GPIO_Init+0x1f8>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a4c      	ldr	r2, [pc, #304]	@ (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d019      	beq.n	8001e2c <HAL_GPIO_Init+0x1f4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a4b      	ldr	r2, [pc, #300]	@ (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_GPIO_Init+0x1f0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a4a      	ldr	r2, [pc, #296]	@ (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00d      	beq.n	8001e24 <HAL_GPIO_Init+0x1ec>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a49      	ldr	r2, [pc, #292]	@ (8001f30 <HAL_GPIO_Init+0x2f8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <HAL_GPIO_Init+0x1e8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a48      	ldr	r2, [pc, #288]	@ (8001f34 <HAL_GPIO_Init+0x2fc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d101      	bne.n	8001e1c <HAL_GPIO_Init+0x1e4>
 8001e18:	2305      	movs	r3, #5
 8001e1a:	e00a      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	e008      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e24:	2303      	movs	r3, #3
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e30:	2300      	movs	r3, #0
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e42:	4937      	ldr	r1, [pc, #220]	@ (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e50:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e74:	4a30      	ldr	r2, [pc, #192]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e9e:	4a26      	ldr	r2, [pc, #152]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef2:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <HAL_GPIO_Init+0x300>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3301      	adds	r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f47f ae9d 	bne.w	8001c48 <HAL_GPIO_Init+0x10>
  }
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	48000400 	.word	0x48000400
 8001f28:	48000800 	.word	0x48000800
 8001f2c:	48000c00 	.word	0x48000c00
 8001f30:	48001000 	.word	0x48001000
 8001f34:	48001400 	.word	0x48001400
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d141      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f86:	d131      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f98:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa0:	4a41      	ldr	r2, [pc, #260]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fa8:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2232      	movs	r2, #50	@ 0x32
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9b      	lsrs	r3, r3, #18
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fbe:	e002      	b.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc6:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd2:	d102      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f2      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fda:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe6:	d158      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e057      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fec:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ff8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ffc:	e04d      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002004:	d141      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002006:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002012:	d131      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201a:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800202c:	4a1e      	ldr	r2, [pc, #120]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002032:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2232      	movs	r2, #50	@ 0x32
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800204a:	e002      	b.n	8002052 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3b01      	subs	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205e:	d102      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f2      	bne.n	800204c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002072:	d112      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e011      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002084:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002088:	e007      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002092:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002098:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40007000 	.word	0x40007000
 80020ac:	20000000 	.word	0x20000000
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c2:	6093      	str	r3, [r2, #8]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e2fe      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d075      	beq.n	80021de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b97      	ldr	r3, [pc, #604]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	4b94      	ldr	r3, [pc, #592]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d102      	bne.n	8002112 <HAL_RCC_OscConfig+0x3e>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d002      	beq.n	8002118 <HAL_RCC_OscConfig+0x44>
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d10b      	bne.n	8002130 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	4b8d      	ldr	r3, [pc, #564]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d05b      	beq.n	80021dc <HAL_RCC_OscConfig+0x108>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d157      	bne.n	80021dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e2d9      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x74>
 800213a:	4b85      	ldr	r3, [pc, #532]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a84      	ldr	r2, [pc, #528]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xb0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x98>
 8002152:	4b7f      	ldr	r3, [pc, #508]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7e      	ldr	r2, [pc, #504]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b7c      	ldr	r3, [pc, #496]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7b      	ldr	r2, [pc, #492]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xb0>
 800216c:	4b78      	ldr	r3, [pc, #480]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a77      	ldr	r2, [pc, #476]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a74      	ldr	r2, [pc, #464]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fa7e 	bl	800168c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fa7a 	bl	800168c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e29e      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xc0>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fa6a 	bl	800168c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fa66 	bl	800168c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e28a      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0xe8>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d075      	beq.n	80022d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f4:	4b56      	ldr	r3, [pc, #344]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0x136>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d002      	beq.n	8002210 <HAL_RCC_OscConfig+0x13c>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d11f      	bne.n	8002250 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002210:	4b4f      	ldr	r3, [pc, #316]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_OscConfig+0x154>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e25d      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b49      	ldr	r3, [pc, #292]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	4946      	ldr	r1, [pc, #280]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800223c:	4b45      	ldr	r3, [pc, #276]	@ (8002354 <HAL_RCC_OscConfig+0x280>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f9d7 	bl	80015f4 <HAL_InitTick>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e249      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a3c      	ldr	r2, [pc, #240]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fa12 	bl	800168c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226c:	f7ff fa0e 	bl	800168c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e232      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227e:	4b34      	ldr	r3, [pc, #208]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	492d      	ldr	r1, [pc, #180]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
 800229e:	e01a      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f9ee 	bl	800168c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff f9ea 	bl	800168c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e20e      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c6:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e0>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d041      	beq.n	8002366 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01c      	beq.n	8002324 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f0:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7ff f9c7 	bl	800168c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002302:	f7ff f9c3 	bl	800168c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1e7      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002314:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ef      	beq.n	8002302 <HAL_RCC_OscConfig+0x22e>
 8002322:	e020      	b.n	8002366 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7ff f9aa 	bl	800168c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800233a:	e00d      	b.n	8002358 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff f9a6 	bl	800168c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d906      	bls.n	8002358 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1ca      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002358:	4b8c      	ldr	r3, [pc, #560]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ea      	bne.n	800233c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80a6 	beq.w	80024c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002378:	4b84      	ldr	r3, [pc, #528]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x2b4>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x2b6>
 8002388:	2300      	movs	r3, #0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b7f      	ldr	r3, [pc, #508]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	4a7e      	ldr	r2, [pc, #504]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	@ 0x58
 800239a:	4b7c      	ldr	r3, [pc, #496]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	4b79      	ldr	r3, [pc, #484]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b6:	4b76      	ldr	r3, [pc, #472]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a75      	ldr	r2, [pc, #468]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7ff f963 	bl	800168c <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7ff f95f 	bl	800168c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e183      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_RCC_OscConfig+0x32e>
 80023f0:	4b66      	ldr	r3, [pc, #408]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	4a65      	ldr	r2, [pc, #404]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002400:	e024      	b.n	800244c <HAL_RCC_OscConfig+0x378>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d110      	bne.n	800242c <HAL_RCC_OscConfig+0x358>
 800240a:	4b60      	ldr	r3, [pc, #384]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	4a5e      	ldr	r2, [pc, #376]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241a:	4b5c      	ldr	r3, [pc, #368]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002420:	4a5a      	ldr	r2, [pc, #360]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x378>
 800242c:	4b57      	ldr	r3, [pc, #348]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002432:	4a56      	ldr	r2, [pc, #344]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800243c:	4b53      	ldr	r3, [pc, #332]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	4a52      	ldr	r2, [pc, #328]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d016      	beq.n	8002482 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7ff f91a 	bl	800168c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7ff f916 	bl	800168c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e138      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	4b46      	ldr	r3, [pc, #280]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ed      	beq.n	800245c <HAL_RCC_OscConfig+0x388>
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7ff f903 	bl	800168c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff f8ff 	bl	800168c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e121      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a0:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ed      	bne.n	800248a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ae:	7ffb      	ldrb	r3, [r7, #31]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b35      	ldr	r3, [pc, #212]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	4a34      	ldr	r2, [pc, #208]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03c      	beq.n	8002546 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024d4:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024da:	4a2c      	ldr	r2, [pc, #176]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff f8d2 	bl	800168c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ec:	f7ff f8ce 	bl	800168c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0f2      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024fe:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ef      	beq.n	80024ec <HAL_RCC_OscConfig+0x418>
 800250c:	e01b      	b.n	8002546 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800250e:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002514:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7ff f8b5 	bl	800168c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002526:	f7ff f8b1 	bl	800168c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0d5      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800253a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ef      	bne.n	8002526 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80c9 	beq.w	80026e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002550:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b0c      	cmp	r3, #12
 800255a:	f000 8083 	beq.w	8002664 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d15e      	bne.n	8002624 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a08      	ldr	r2, [pc, #32]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7ff f88b 	bl	800168c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e00c      	b.n	8002594 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7ff f887 	bl	800168c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d905      	bls.n	8002594 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0ab      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002594:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ec      	bne.n	800257a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b52      	ldr	r3, [pc, #328]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b52      	ldr	r3, [pc, #328]	@ (80026f0 <HAL_RCC_OscConfig+0x61c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6a11      	ldr	r1, [r2, #32]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025ba:	0212      	lsls	r2, r2, #8
 80025bc:	4311      	orrs	r1, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025c2:	0852      	lsrs	r2, r2, #1
 80025c4:	3a01      	subs	r2, #1
 80025c6:	0552      	lsls	r2, r2, #21
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025ce:	0852      	lsrs	r2, r2, #1
 80025d0:	3a01      	subs	r2, #1
 80025d2:	0652      	lsls	r2, r2, #25
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025da:	06d2      	lsls	r2, r2, #27
 80025dc:	430a      	orrs	r2, r1
 80025de:	4943      	ldr	r1, [pc, #268]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b41      	ldr	r3, [pc, #260]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a40      	ldr	r2, [pc, #256]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f0:	4b3e      	ldr	r3, [pc, #248]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a3d      	ldr	r2, [pc, #244]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7ff f846 	bl	800168c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff f842 	bl	800168c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e066      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002616:	4b35      	ldr	r3, [pc, #212]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x530>
 8002622:	e05e      	b.n	80026e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a30      	ldr	r2, [pc, #192]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff f82c 	bl	800168c <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7ff f828 	bl	800168c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e04c      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264a:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002656:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	4924      	ldr	r1, [pc, #144]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 800265c:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <HAL_RCC_OscConfig+0x620>)
 800265e:	4013      	ands	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
 8002662:	e03e      	b.n	80026e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e039      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002670:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d12c      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	3b01      	subs	r3, #1
 8002690:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d123      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11b      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d113      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d109      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	019f800c 	.word	0x019f800c
 80026f4:	feeefffc 	.word	0xfeeefffc

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e11e      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b91      	ldr	r3, [pc, #580]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b8e      	ldr	r3, [pc, #568]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 020f 	bic.w	r2, r3, #15
 8002726:	498c      	ldr	r1, [pc, #560]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b8a      	ldr	r3, [pc, #552]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e106      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d073      	beq.n	8002834 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d129      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002754:	4b81      	ldr	r3, [pc, #516]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0f4      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002764:	f000 f99e 	bl	8002aa4 <RCC_GetSysClockFreqFromPLLSource>
 8002768:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4a7c      	ldr	r2, [pc, #496]	@ (8002960 <HAL_RCC_ClockConfig+0x268>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d93f      	bls.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002772:	4b7a      	ldr	r3, [pc, #488]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002786:	2b00      	cmp	r3, #0
 8002788:	d033      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d12f      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002792:	4b72      	ldr	r3, [pc, #456]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800279a:	4a70      	ldr	r2, [pc, #448]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800279c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e024      	b.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b0:	4b6a      	ldr	r3, [pc, #424]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0c6      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c0:	4b66      	ldr	r3, [pc, #408]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0be      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027d0:	f000 f8ce 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4a61      	ldr	r2, [pc, #388]	@ (8002960 <HAL_RCC_ClockConfig+0x268>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d909      	bls.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027de:	4b5f      	ldr	r3, [pc, #380]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027e6:	4a5d      	ldr	r2, [pc, #372]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b5a      	ldr	r3, [pc, #360]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4957      	ldr	r1, [pc, #348]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe ff42 	bl	800168c <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe ff3e 	bl	800168c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e095      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b4e      	ldr	r3, [pc, #312]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800284c:	4b43      	ldr	r3, [pc, #268]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a42      	ldr	r2, [pc, #264]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002852:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002856:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002864:	4b3d      	ldr	r3, [pc, #244]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800286c:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800286e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002872:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b39      	ldr	r3, [pc, #228]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4936      	ldr	r1, [pc, #216]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
 8002886:	e008      	b.n	800289a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d105      	bne.n	800289a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800288e:	4b33      	ldr	r3, [pc, #204]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4a32      	ldr	r2, [pc, #200]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002894:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002898:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289a:	4b2f      	ldr	r3, [pc, #188]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d21d      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 020f 	bic.w	r2, r3, #15
 80028b0:	4929      	ldr	r1, [pc, #164]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028b8:	f7fe fee8 	bl	800168c <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7fe fee4 	bl	800168c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e03b      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1ed      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4917      	ldr	r1, [pc, #92]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490f      	ldr	r1, [pc, #60]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002922:	f000 f825 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490c      	ldr	r1, [pc, #48]	@ (8002964 <HAL_RCC_ClockConfig+0x26c>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <HAL_RCC_ClockConfig+0x270>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fe54 	bl	80015f4 <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000
 800295c:	40021000 	.word	0x40021000
 8002960:	04c4b400 	.word	0x04c4b400
 8002964:	08005288 	.word	0x08005288
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002976:	4b2c      	ldr	r3, [pc, #176]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d102      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e047      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002988:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d102      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002994:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e03e      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800299a:	4b23      	ldr	r3, [pc, #140]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d136      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a6:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3301      	adds	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ce:	68d2      	ldr	r2, [r2, #12]
 80029d0:	0a12      	lsrs	r2, r2, #8
 80029d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
      break;
 80029dc:	e00c      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029de:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	0a12      	lsrs	r2, r2, #8
 80029ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
      break;
 80029f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0e5b      	lsrs	r3, r3, #25
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	e001      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a18:	693b      	ldr	r3, [r7, #16]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	007a1200 	.word	0x007a1200

08002a34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000000 	.word	0x20000000

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4904      	ldr	r1, [pc, #16]	@ (8002a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08005298 	.word	0x08005298

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a7c:	f7ff ffda 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0adb      	lsrs	r3, r3, #11
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4904      	ldr	r1, [pc, #16]	@ (8002aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08005298 	.word	0x08005298

08002aa4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d10c      	bne.n	8002ae2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac8:	4a17      	ldr	r2, [pc, #92]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ad2:	68d2      	ldr	r2, [r2, #12]
 8002ad4:	0a12      	lsrs	r2, r2, #8
 8002ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	617b      	str	r3, [r7, #20]
    break;
 8002ae0:	e00c      	b.n	8002afc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4a0e      	ldr	r2, [pc, #56]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	0a12      	lsrs	r2, r2, #8
 8002af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
    break;
 8002afa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002afc:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0e5b      	lsrs	r3, r3, #25
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b16:	687b      	ldr	r3, [r7, #4]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	00f42400 	.word	0x00f42400

08002b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b38:	2300      	movs	r3, #0
 8002b3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8098 	beq.w	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b43      	ldr	r3, [pc, #268]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b40      	ldr	r3, [pc, #256]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b62:	4a3f      	ldr	r2, [pc, #252]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b76:	2301      	movs	r3, #1
 8002b78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a39      	ldr	r2, [pc, #228]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b86:	f7fe fd81 	bl	800168c <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe fd7d 	bl	800168c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d902      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	74fb      	strb	r3, [r7, #19]
        break;
 8002ba0:	e005      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ba2:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ef      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d159      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d019      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bdc:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bec:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bfc:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fd3d 	bl	800168c <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c14:	e00b      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe fd39 	bl	800168c <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d902      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ec      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c42:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	4903      	ldr	r1, [pc, #12]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c58:	e008      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	74bb      	strb	r3, [r7, #18]
 8002c5e:	e005      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6c:	7c7b      	ldrb	r3, [r7, #17]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4ba7      	ldr	r3, [pc, #668]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	4aa6      	ldr	r2, [pc, #664]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8a:	4ba1      	ldr	r3, [pc, #644]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	f023 0203 	bic.w	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	499d      	ldr	r1, [pc, #628]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cac:	4b98      	ldr	r3, [pc, #608]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	f023 020c 	bic.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4995      	ldr	r1, [pc, #596]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cce:	4b90      	ldr	r3, [pc, #576]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	498c      	ldr	r1, [pc, #560]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf0:	4b87      	ldr	r3, [pc, #540]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	4984      	ldr	r1, [pc, #528]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d12:	4b7f      	ldr	r3, [pc, #508]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	497b      	ldr	r1, [pc, #492]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d34:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	4973      	ldr	r1, [pc, #460]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d56:	4b6e      	ldr	r3, [pc, #440]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	496a      	ldr	r1, [pc, #424]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d78:	4b65      	ldr	r3, [pc, #404]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4962      	ldr	r1, [pc, #392]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	4959      	ldr	r1, [pc, #356]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dbc:	4b54      	ldr	r3, [pc, #336]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	4951      	ldr	r1, [pc, #324]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dde:	4b4c      	ldr	r3, [pc, #304]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	4948      	ldr	r1, [pc, #288]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e00:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4940      	ldr	r1, [pc, #256]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e20:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e2a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e38:	4b35      	ldr	r3, [pc, #212]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	4932      	ldr	r1, [pc, #200]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e62:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e70:	4b27      	ldr	r3, [pc, #156]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	4924      	ldr	r1, [pc, #144]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b1f      	ldr	r3, [pc, #124]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	4916      	ldr	r1, [pc, #88]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d019      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4908      	ldr	r1, [pc, #32]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002efe:	d109      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f00:	4b03      	ldr	r3, [pc, #12]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a02      	ldr	r2, [pc, #8]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	60d3      	str	r3, [r2, #12]
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f20:	4b29      	ldr	r3, [pc, #164]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	4926      	ldr	r1, [pc, #152]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f40:	4b21      	ldr	r3, [pc, #132]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a20      	ldr	r2, [pc, #128]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f58:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f66:	4918      	ldr	r1, [pc, #96]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f78:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f90:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	490a      	ldr	r1, [pc, #40]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fae:	d105      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e09d      	b.n	800311a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fee:	d009      	beq.n	8003004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
 8002ff6:	e005      	b.n	8003004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fcf8 	bl	8000a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003044:	d902      	bls.n	800304c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e002      	b.n	8003052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800304c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800305a:	d007      	beq.n	800306c <HAL_SPI_Init+0xa0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003064:	d002      	beq.n	800306c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	ea42 0103 	orr.w	r1, r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	0c1b      	lsrs	r3, r3, #16
 80030c8:	f003 0204 	and.w	r2, r3, #4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030e8:	ea42 0103 	orr.w	r1, r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e049      	b.n	80031c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd feb9 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2202      	movs	r2, #2
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 fbc9 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e049      	b.n	8003276 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fe96 	bl	8000f28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 fb72 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_TIM_PWM_Start+0x24>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e03c      	b.n	800331e <HAL_TIM_PWM_Start+0x9e>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d109      	bne.n	80032be <HAL_TIM_PWM_Start+0x3e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e02f      	b.n	800331e <HAL_TIM_PWM_Start+0x9e>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d109      	bne.n	80032d8 <HAL_TIM_PWM_Start+0x58>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e022      	b.n	800331e <HAL_TIM_PWM_Start+0x9e>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d109      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x72>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e015      	b.n	800331e <HAL_TIM_PWM_Start+0x9e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d109      	bne.n	800330c <HAL_TIM_PWM_Start+0x8c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e008      	b.n	800331e <HAL_TIM_PWM_Start+0x9e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0a6      	b.n	8003474 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Start+0xb6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003334:	e023      	b.n	800337e <HAL_TIM_PWM_Start+0xfe>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Start+0xc6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003344:	e01b      	b.n	800337e <HAL_TIM_PWM_Start+0xfe>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Start+0xd6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003354:	e013      	b.n	800337e <HAL_TIM_PWM_Start+0xfe>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d104      	bne.n	8003366 <HAL_TIM_PWM_Start+0xe6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003364:	e00b      	b.n	800337e <HAL_TIM_PWM_Start+0xfe>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b10      	cmp	r3, #16
 800336a:	d104      	bne.n	8003376 <HAL_TIM_PWM_Start+0xf6>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003374:	e003      	b.n	800337e <HAL_TIM_PWM_Start+0xfe>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2201      	movs	r2, #1
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 ff30 	bl	80041ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a3a      	ldr	r2, [pc, #232]	@ (800347c <HAL_TIM_PWM_Start+0x1fc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_TIM_PWM_Start+0x148>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a39      	ldr	r2, [pc, #228]	@ (8003480 <HAL_TIM_PWM_Start+0x200>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_TIM_PWM_Start+0x148>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a37      	ldr	r2, [pc, #220]	@ (8003484 <HAL_TIM_PWM_Start+0x204>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_TIM_PWM_Start+0x148>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a36      	ldr	r2, [pc, #216]	@ (8003488 <HAL_TIM_PWM_Start+0x208>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_TIM_PWM_Start+0x148>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a34      	ldr	r2, [pc, #208]	@ (800348c <HAL_TIM_PWM_Start+0x20c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_PWM_Start+0x148>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a33      	ldr	r2, [pc, #204]	@ (8003490 <HAL_TIM_PWM_Start+0x210>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_PWM_Start+0x14c>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_TIM_PWM_Start+0x14e>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a25      	ldr	r2, [pc, #148]	@ (800347c <HAL_TIM_PWM_Start+0x1fc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_TIM_PWM_Start+0x1b2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f4:	d01d      	beq.n	8003432 <HAL_TIM_PWM_Start+0x1b2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a26      	ldr	r2, [pc, #152]	@ (8003494 <HAL_TIM_PWM_Start+0x214>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_TIM_PWM_Start+0x1b2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a24      	ldr	r2, [pc, #144]	@ (8003498 <HAL_TIM_PWM_Start+0x218>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_TIM_PWM_Start+0x1b2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a23      	ldr	r2, [pc, #140]	@ (800349c <HAL_TIM_PWM_Start+0x21c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_TIM_PWM_Start+0x1b2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	@ (8003480 <HAL_TIM_PWM_Start+0x200>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_TIM_PWM_Start+0x1b2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a18      	ldr	r2, [pc, #96]	@ (8003484 <HAL_TIM_PWM_Start+0x204>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_TIM_PWM_Start+0x1b2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <HAL_TIM_PWM_Start+0x210>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d115      	bne.n	800345e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <HAL_TIM_PWM_Start+0x220>)
 800343a:	4013      	ands	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b06      	cmp	r3, #6
 8003442:	d015      	beq.n	8003470 <HAL_TIM_PWM_Start+0x1f0>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344a:	d011      	beq.n	8003470 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345c:	e008      	b.n	8003470 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0201 	orr.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e000      	b.n	8003472 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40013400 	.word	0x40013400
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800
 8003490:	40015000 	.word	0x40015000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	00010007 	.word	0x00010007

080034a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034be:	2302      	movs	r3, #2
 80034c0:	e0ff      	b.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b14      	cmp	r3, #20
 80034ce:	f200 80f0 	bhi.w	80036b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034d2:	a201      	add	r2, pc, #4	@ (adr r2, 80034d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	0800352d 	.word	0x0800352d
 80034dc:	080036b3 	.word	0x080036b3
 80034e0:	080036b3 	.word	0x080036b3
 80034e4:	080036b3 	.word	0x080036b3
 80034e8:	0800356d 	.word	0x0800356d
 80034ec:	080036b3 	.word	0x080036b3
 80034f0:	080036b3 	.word	0x080036b3
 80034f4:	080036b3 	.word	0x080036b3
 80034f8:	080035af 	.word	0x080035af
 80034fc:	080036b3 	.word	0x080036b3
 8003500:	080036b3 	.word	0x080036b3
 8003504:	080036b3 	.word	0x080036b3
 8003508:	080035ef 	.word	0x080035ef
 800350c:	080036b3 	.word	0x080036b3
 8003510:	080036b3 	.word	0x080036b3
 8003514:	080036b3 	.word	0x080036b3
 8003518:	08003631 	.word	0x08003631
 800351c:	080036b3 	.word	0x080036b3
 8003520:	080036b3 	.word	0x080036b3
 8003524:	080036b3 	.word	0x080036b3
 8003528:	08003671 	.word	0x08003671
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fa94 	bl	8003a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0204 	bic.w	r2, r2, #4
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	619a      	str	r2, [r3, #24]
      break;
 800356a:	e0a5      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fb0e 	bl	8003b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	021a      	lsls	r2, r3, #8
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	619a      	str	r2, [r3, #24]
      break;
 80035ac:	e084      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fb81 	bl	8003cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0208 	orr.w	r2, r2, #8
 80035c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0204 	bic.w	r2, r2, #4
 80035d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
      break;
 80035ec:	e064      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fbf3 	bl	8003de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	61da      	str	r2, [r3, #28]
      break;
 800362e:	e043      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fc66 	bl	8003f08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0204 	bic.w	r2, r2, #4
 800365a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800366e:	e023      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fcb0 	bl	8003fdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036b0:	e002      	b.n	80036b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	75fb      	strb	r3, [r7, #23]
      break;
 80036b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop

080036cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_ConfigClockSource+0x1c>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e0f6      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x20a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003706:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800370a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6f      	ldr	r2, [pc, #444]	@ (80038e0 <HAL_TIM_ConfigClockSource+0x214>)
 8003722:	4293      	cmp	r3, r2
 8003724:	f000 80c1 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003728:	4a6d      	ldr	r2, [pc, #436]	@ (80038e0 <HAL_TIM_ConfigClockSource+0x214>)
 800372a:	4293      	cmp	r3, r2
 800372c:	f200 80c6 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 8003730:	4a6c      	ldr	r2, [pc, #432]	@ (80038e4 <HAL_TIM_ConfigClockSource+0x218>)
 8003732:	4293      	cmp	r3, r2
 8003734:	f000 80b9 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003738:	4a6a      	ldr	r2, [pc, #424]	@ (80038e4 <HAL_TIM_ConfigClockSource+0x218>)
 800373a:	4293      	cmp	r3, r2
 800373c:	f200 80be 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 8003740:	4a69      	ldr	r2, [pc, #420]	@ (80038e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	f000 80b1 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003748:	4a67      	ldr	r2, [pc, #412]	@ (80038e8 <HAL_TIM_ConfigClockSource+0x21c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	f200 80b6 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 8003750:	4a66      	ldr	r2, [pc, #408]	@ (80038ec <HAL_TIM_ConfigClockSource+0x220>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f000 80a9 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003758:	4a64      	ldr	r2, [pc, #400]	@ (80038ec <HAL_TIM_ConfigClockSource+0x220>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f200 80ae 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 8003760:	4a63      	ldr	r2, [pc, #396]	@ (80038f0 <HAL_TIM_ConfigClockSource+0x224>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f000 80a1 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003768:	4a61      	ldr	r2, [pc, #388]	@ (80038f0 <HAL_TIM_ConfigClockSource+0x224>)
 800376a:	4293      	cmp	r3, r2
 800376c:	f200 80a6 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 8003770:	4a60      	ldr	r2, [pc, #384]	@ (80038f4 <HAL_TIM_ConfigClockSource+0x228>)
 8003772:	4293      	cmp	r3, r2
 8003774:	f000 8099 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003778:	4a5e      	ldr	r2, [pc, #376]	@ (80038f4 <HAL_TIM_ConfigClockSource+0x228>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f200 809e 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 8003780:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003784:	f000 8091 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003788:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800378c:	f200 8096 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 8003790:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003794:	f000 8089 	beq.w	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 8003798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800379c:	f200 808e 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a4:	d03e      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x158>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037aa:	f200 8087 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b2:	f000 8086 	beq.w	80038c2 <HAL_TIM_ConfigClockSource+0x1f6>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ba:	d87f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037bc:	2b70      	cmp	r3, #112	@ 0x70
 80037be:	d01a      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x12a>
 80037c0:	2b70      	cmp	r3, #112	@ 0x70
 80037c2:	d87b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037c4:	2b60      	cmp	r3, #96	@ 0x60
 80037c6:	d050      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x19e>
 80037c8:	2b60      	cmp	r3, #96	@ 0x60
 80037ca:	d877      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037cc:	2b50      	cmp	r3, #80	@ 0x50
 80037ce:	d03c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x17e>
 80037d0:	2b50      	cmp	r3, #80	@ 0x50
 80037d2:	d873      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d058      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x1be>
 80037d8:	2b40      	cmp	r3, #64	@ 0x40
 80037da:	d86f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037dc:	2b30      	cmp	r3, #48	@ 0x30
 80037de:	d064      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 80037e0:	2b30      	cmp	r3, #48	@ 0x30
 80037e2:	d86b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d060      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d867      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d05a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x1de>
 80037f4:	e062      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003806:	f000 fcd1 	bl	80041ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
      break;
 8003822:	e04f      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003834:	f000 fcba 	bl	80041ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e03c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003856:	461a      	mov	r2, r3
 8003858:	f000 fc2c 	bl	80040b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2150      	movs	r1, #80	@ 0x50
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fc85 	bl	8004172 <TIM_ITRx_SetConfig>
      break;
 8003868:	e02c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fc4b 	bl	8004112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2160      	movs	r1, #96	@ 0x60
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fc75 	bl	8004172 <TIM_ITRx_SetConfig>
      break;
 8003888:	e01c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	461a      	mov	r2, r3
 8003898:	f000 fc0c 	bl	80040b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2140      	movs	r1, #64	@ 0x40
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fc65 	bl	8004172 <TIM_ITRx_SetConfig>
      break;
 80038a8:	e00c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 fc5c 	bl	8004172 <TIM_ITRx_SetConfig>
      break;
 80038ba:	e003      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80038c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00100070 	.word	0x00100070
 80038e4:	00100060 	.word	0x00100060
 80038e8:	00100050 	.word	0x00100050
 80038ec:	00100040 	.word	0x00100040
 80038f0:	00100030 	.word	0x00100030
 80038f4:	00100020 	.word	0x00100020

080038f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a3c <TIM_Base_SetConfig+0x144>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d017      	beq.n	8003940 <TIM_Base_SetConfig+0x48>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003916:	d013      	beq.n	8003940 <TIM_Base_SetConfig+0x48>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a49      	ldr	r2, [pc, #292]	@ (8003a40 <TIM_Base_SetConfig+0x148>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00f      	beq.n	8003940 <TIM_Base_SetConfig+0x48>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a48      	ldr	r2, [pc, #288]	@ (8003a44 <TIM_Base_SetConfig+0x14c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00b      	beq.n	8003940 <TIM_Base_SetConfig+0x48>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a47      	ldr	r2, [pc, #284]	@ (8003a48 <TIM_Base_SetConfig+0x150>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d007      	beq.n	8003940 <TIM_Base_SetConfig+0x48>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a46      	ldr	r2, [pc, #280]	@ (8003a4c <TIM_Base_SetConfig+0x154>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d003      	beq.n	8003940 <TIM_Base_SetConfig+0x48>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a45      	ldr	r2, [pc, #276]	@ (8003a50 <TIM_Base_SetConfig+0x158>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d108      	bne.n	8003952 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a39      	ldr	r2, [pc, #228]	@ (8003a3c <TIM_Base_SetConfig+0x144>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d023      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003960:	d01f      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a36      	ldr	r2, [pc, #216]	@ (8003a40 <TIM_Base_SetConfig+0x148>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01b      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a35      	ldr	r2, [pc, #212]	@ (8003a44 <TIM_Base_SetConfig+0x14c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d017      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a34      	ldr	r2, [pc, #208]	@ (8003a48 <TIM_Base_SetConfig+0x150>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a33      	ldr	r2, [pc, #204]	@ (8003a4c <TIM_Base_SetConfig+0x154>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00f      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a33      	ldr	r2, [pc, #204]	@ (8003a54 <TIM_Base_SetConfig+0x15c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00b      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <TIM_Base_SetConfig+0x160>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a31      	ldr	r2, [pc, #196]	@ (8003a5c <TIM_Base_SetConfig+0x164>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0xaa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2c      	ldr	r2, [pc, #176]	@ (8003a50 <TIM_Base_SetConfig+0x158>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a18      	ldr	r2, [pc, #96]	@ (8003a3c <TIM_Base_SetConfig+0x144>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d013      	beq.n	8003a08 <TIM_Base_SetConfig+0x110>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <TIM_Base_SetConfig+0x154>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00f      	beq.n	8003a08 <TIM_Base_SetConfig+0x110>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003a54 <TIM_Base_SetConfig+0x15c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <TIM_Base_SetConfig+0x110>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a19      	ldr	r2, [pc, #100]	@ (8003a58 <TIM_Base_SetConfig+0x160>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_Base_SetConfig+0x110>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a18      	ldr	r2, [pc, #96]	@ (8003a5c <TIM_Base_SetConfig+0x164>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_Base_SetConfig+0x110>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a13      	ldr	r2, [pc, #76]	@ (8003a50 <TIM_Base_SetConfig+0x158>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d105      	bne.n	8003a2e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f023 0201 	bic.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800
 8003a48:	40000c00 	.word	0x40000c00
 8003a4c:	40013400 	.word	0x40013400
 8003a50:	40015000 	.word	0x40015000
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	f023 0201 	bic.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 0302 	bic.w	r3, r3, #2
 8003aac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a30      	ldr	r2, [pc, #192]	@ (8003b7c <TIM_OC1_SetConfig+0x11c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b80 <TIM_OC1_SetConfig+0x120>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2e      	ldr	r2, [pc, #184]	@ (8003b84 <TIM_OC1_SetConfig+0x124>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b88 <TIM_OC1_SetConfig+0x128>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <TIM_OC1_SetConfig+0x12c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC1_SetConfig+0x88>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <TIM_OC1_SetConfig+0x130>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10c      	bne.n	8003b02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0308 	bic.w	r3, r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <TIM_OC1_SetConfig+0x11c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b80 <TIM_OC1_SetConfig+0x120>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00f      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a1b      	ldr	r2, [pc, #108]	@ (8003b84 <TIM_OC1_SetConfig+0x124>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <TIM_OC1_SetConfig+0x128>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a19      	ldr	r2, [pc, #100]	@ (8003b8c <TIM_OC1_SetConfig+0x12c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_OC1_SetConfig+0xd2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <TIM_OC1_SetConfig+0x130>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d111      	bne.n	8003b56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800
 8003b90:	40015000 	.word	0x40015000

08003b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f023 0210 	bic.w	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0320 	bic.w	r3, r3, #32
 8003be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca4 <TIM_OC2_SetConfig+0x110>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_OC2_SetConfig+0x74>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <TIM_OC2_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC2_SetConfig+0x74>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a2a      	ldr	r2, [pc, #168]	@ (8003cac <TIM_OC2_SetConfig+0x118>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d10d      	bne.n	8003c24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <TIM_OC2_SetConfig+0x110>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <TIM_OC2_SetConfig+0x114>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00f      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb0 <TIM_OC2_SetConfig+0x11c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <TIM_OC2_SetConfig+0x120>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <TIM_OC2_SetConfig+0x124>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <TIM_OC2_SetConfig+0xc0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <TIM_OC2_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d113      	bne.n	8003c7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40013400 	.word	0x40013400
 8003cac:	40015000 	.word	0x40015000
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400
 8003cb8:	40014800 	.word	0x40014800

08003cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0303 	bic.w	r3, r3, #3
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc8 <TIM_OC3_SetConfig+0x10c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <TIM_OC3_SetConfig+0x72>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	@ (8003dcc <TIM_OC3_SetConfig+0x110>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_OC3_SetConfig+0x72>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a29      	ldr	r2, [pc, #164]	@ (8003dd0 <TIM_OC3_SetConfig+0x114>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d10d      	bne.n	8003d4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <TIM_OC3_SetConfig+0x10c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1d      	ldr	r2, [pc, #116]	@ (8003dcc <TIM_OC3_SetConfig+0x110>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd4 <TIM_OC3_SetConfig+0x118>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd8 <TIM_OC3_SetConfig+0x11c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ddc <TIM_OC3_SetConfig+0x120>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_OC3_SetConfig+0xbe>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a16      	ldr	r2, [pc, #88]	@ (8003dd0 <TIM_OC3_SetConfig+0x114>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d113      	bne.n	8003da2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40013400 	.word	0x40013400
 8003dd0:	40015000 	.word	0x40015000
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	031b      	lsls	r3, r3, #12
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef0 <TIM_OC4_SetConfig+0x110>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d007      	beq.n	8003e54 <TIM_OC4_SetConfig+0x74>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef4 <TIM_OC4_SetConfig+0x114>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC4_SetConfig+0x74>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef8 <TIM_OC4_SetConfig+0x118>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10d      	bne.n	8003e70 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	031b      	lsls	r3, r3, #12
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef0 <TIM_OC4_SetConfig+0x110>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <TIM_OC4_SetConfig+0xc0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef4 <TIM_OC4_SetConfig+0x114>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00f      	beq.n	8003ea0 <TIM_OC4_SetConfig+0xc0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <TIM_OC4_SetConfig+0x11c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00b      	beq.n	8003ea0 <TIM_OC4_SetConfig+0xc0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f00 <TIM_OC4_SetConfig+0x120>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d007      	beq.n	8003ea0 <TIM_OC4_SetConfig+0xc0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1c      	ldr	r2, [pc, #112]	@ (8003f04 <TIM_OC4_SetConfig+0x124>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_OC4_SetConfig+0xc0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <TIM_OC4_SetConfig+0x118>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d113      	bne.n	8003ec8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ea6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003eae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	019b      	lsls	r3, r3, #6
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40012c00 	.word	0x40012c00
 8003ef4:	40013400 	.word	0x40013400
 8003ef8:	40015000 	.word	0x40015000
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	@ (8003fc4 <TIM_OC5_SetConfig+0xbc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d013      	beq.n	8003f8a <TIM_OC5_SetConfig+0x82>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <TIM_OC5_SetConfig+0xc0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00f      	beq.n	8003f8a <TIM_OC5_SetConfig+0x82>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a17      	ldr	r2, [pc, #92]	@ (8003fcc <TIM_OC5_SetConfig+0xc4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_OC5_SetConfig+0x82>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a16      	ldr	r2, [pc, #88]	@ (8003fd0 <TIM_OC5_SetConfig+0xc8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d007      	beq.n	8003f8a <TIM_OC5_SetConfig+0x82>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	@ (8003fd4 <TIM_OC5_SetConfig+0xcc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_OC5_SetConfig+0x82>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <TIM_OC5_SetConfig+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d109      	bne.n	8003f9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	621a      	str	r2, [r3, #32]
}
 8003fb8:	bf00      	nop
 8003fba:	371c      	adds	r7, #28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40013400 	.word	0x40013400
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40014400 	.word	0x40014400
 8003fd4:	40014800 	.word	0x40014800
 8003fd8:	40015000 	.word	0x40015000

08003fdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	051b      	lsls	r3, r3, #20
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1a      	ldr	r2, [pc, #104]	@ (800409c <TIM_OC6_SetConfig+0xc0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <TIM_OC6_SetConfig+0x84>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a19      	ldr	r2, [pc, #100]	@ (80040a0 <TIM_OC6_SetConfig+0xc4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00f      	beq.n	8004060 <TIM_OC6_SetConfig+0x84>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a18      	ldr	r2, [pc, #96]	@ (80040a4 <TIM_OC6_SetConfig+0xc8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_OC6_SetConfig+0x84>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a17      	ldr	r2, [pc, #92]	@ (80040a8 <TIM_OC6_SetConfig+0xcc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_OC6_SetConfig+0x84>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a16      	ldr	r2, [pc, #88]	@ (80040ac <TIM_OC6_SetConfig+0xd0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC6_SetConfig+0x84>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a15      	ldr	r2, [pc, #84]	@ (80040b0 <TIM_OC6_SetConfig+0xd4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d109      	bne.n	8004074 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	40015000 	.word	0x40015000

080040b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 030a 	bic.w	r3, r3, #10
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004112:	b480      	push	{r7}
 8004114:	b087      	sub	sp, #28
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 0210 	bic.w	r2, r3, #16
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800413c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	031b      	lsls	r3, r3, #12
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800414e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004172:	b480      	push	{r7}
 8004174:	b085      	sub	sp, #20
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800418c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	f043 0307 	orr.w	r3, r3, #7
 8004198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	609a      	str	r2, [r3, #8]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2201      	movs	r2, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1a      	ldr	r2, [r3, #32]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e074      	b.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a34      	ldr	r2, [pc, #208]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a33      	ldr	r2, [pc, #204]	@ (800434c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d004      	beq.n	800428e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a31      	ldr	r2, [pc, #196]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d108      	bne.n	80042a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004294:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a21      	ldr	r2, [pc, #132]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d022      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d0:	d01d      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d018      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	@ (800435c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00e      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a15      	ldr	r2, [pc, #84]	@ (800434c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d009      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10c      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40013400 	.word	0x40013400
 8004350:	40015000 	.word	0x40015000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40014000 	.word	0x40014000

08004364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800437c:	2302      	movs	r3, #2
 800437e:	e078      	b.n	8004472 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1c      	ldr	r2, [pc, #112]	@ (8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1b      	ldr	r2, [pc, #108]	@ (8004484 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a19      	ldr	r2, [pc, #100]	@ (8004488 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d11c      	bne.n	8004460 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	051b      	lsls	r3, r3, #20
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40013400 	.word	0x40013400
 8004488:	40015000 	.word	0x40015000

0800448c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e042      	b.n	8004524 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fc ff35 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2224      	movs	r2, #36	@ 0x24
 80044ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fb7c 	bl	8004bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f87d 	bl	80045dc <UART_SetConfig>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e01b      	b.n	8004524 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800450a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0201 	orr.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fbfb 	bl	8004d18 <UART_CheckIdleState>
 8004522:	4603      	mov	r3, r0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e04a      	b.n	80045d4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7fc fee5 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2224      	movs	r2, #36	@ 0x24
 800455a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fb2c 	bl	8004bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f82d 	bl	80045dc <UART_SetConfig>
 8004582:	4603      	mov	r3, r0
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e023      	b.n	80045d4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800459a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80045aa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fba3 	bl	8004d18 <UART_CheckIdleState>
 80045d2:	4603      	mov	r3, r0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b08c      	sub	sp, #48	@ 0x30
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4313      	orrs	r3, r2
 8004602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4baa      	ldr	r3, [pc, #680]	@ (80048b4 <UART_SetConfig+0x2d8>)
 800460c:	4013      	ands	r3, r2
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004614:	430b      	orrs	r3, r1
 8004616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a9f      	ldr	r2, [pc, #636]	@ (80048b8 <UART_SetConfig+0x2dc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d004      	beq.n	8004648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004644:	4313      	orrs	r3, r2
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004652:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800465c:	430b      	orrs	r3, r1
 800465e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004666:	f023 010f 	bic.w	r1, r3, #15
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a90      	ldr	r2, [pc, #576]	@ (80048bc <UART_SetConfig+0x2e0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d125      	bne.n	80046cc <UART_SetConfig+0xf0>
 8004680:	4b8f      	ldr	r3, [pc, #572]	@ (80048c0 <UART_SetConfig+0x2e4>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b03      	cmp	r3, #3
 800468c:	d81a      	bhi.n	80046c4 <UART_SetConfig+0xe8>
 800468e:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <UART_SetConfig+0xb8>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046b5 	.word	0x080046b5
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046bd 	.word	0x080046bd
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046aa:	e116      	b.n	80048da <UART_SetConfig+0x2fe>
 80046ac:	2302      	movs	r3, #2
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b2:	e112      	b.n	80048da <UART_SetConfig+0x2fe>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ba:	e10e      	b.n	80048da <UART_SetConfig+0x2fe>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046c2:	e10a      	b.n	80048da <UART_SetConfig+0x2fe>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ca:	e106      	b.n	80048da <UART_SetConfig+0x2fe>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a7c      	ldr	r2, [pc, #496]	@ (80048c4 <UART_SetConfig+0x2e8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d138      	bne.n	8004748 <UART_SetConfig+0x16c>
 80046d6:	4b7a      	ldr	r3, [pc, #488]	@ (80048c0 <UART_SetConfig+0x2e4>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b0c      	cmp	r3, #12
 80046e2:	d82d      	bhi.n	8004740 <UART_SetConfig+0x164>
 80046e4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ec <UART_SetConfig+0x110>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004721 	.word	0x08004721
 80046f0:	08004741 	.word	0x08004741
 80046f4:	08004741 	.word	0x08004741
 80046f8:	08004741 	.word	0x08004741
 80046fc:	08004731 	.word	0x08004731
 8004700:	08004741 	.word	0x08004741
 8004704:	08004741 	.word	0x08004741
 8004708:	08004741 	.word	0x08004741
 800470c:	08004729 	.word	0x08004729
 8004710:	08004741 	.word	0x08004741
 8004714:	08004741 	.word	0x08004741
 8004718:	08004741 	.word	0x08004741
 800471c:	08004739 	.word	0x08004739
 8004720:	2300      	movs	r3, #0
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004726:	e0d8      	b.n	80048da <UART_SetConfig+0x2fe>
 8004728:	2302      	movs	r3, #2
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472e:	e0d4      	b.n	80048da <UART_SetConfig+0x2fe>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004736:	e0d0      	b.n	80048da <UART_SetConfig+0x2fe>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473e:	e0cc      	b.n	80048da <UART_SetConfig+0x2fe>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004746:	e0c8      	b.n	80048da <UART_SetConfig+0x2fe>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5e      	ldr	r2, [pc, #376]	@ (80048c8 <UART_SetConfig+0x2ec>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d125      	bne.n	800479e <UART_SetConfig+0x1c2>
 8004752:	4b5b      	ldr	r3, [pc, #364]	@ (80048c0 <UART_SetConfig+0x2e4>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800475c:	2b30      	cmp	r3, #48	@ 0x30
 800475e:	d016      	beq.n	800478e <UART_SetConfig+0x1b2>
 8004760:	2b30      	cmp	r3, #48	@ 0x30
 8004762:	d818      	bhi.n	8004796 <UART_SetConfig+0x1ba>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d00a      	beq.n	800477e <UART_SetConfig+0x1a2>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d814      	bhi.n	8004796 <UART_SetConfig+0x1ba>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <UART_SetConfig+0x19a>
 8004770:	2b10      	cmp	r3, #16
 8004772:	d008      	beq.n	8004786 <UART_SetConfig+0x1aa>
 8004774:	e00f      	b.n	8004796 <UART_SetConfig+0x1ba>
 8004776:	2300      	movs	r3, #0
 8004778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800477c:	e0ad      	b.n	80048da <UART_SetConfig+0x2fe>
 800477e:	2302      	movs	r3, #2
 8004780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004784:	e0a9      	b.n	80048da <UART_SetConfig+0x2fe>
 8004786:	2304      	movs	r3, #4
 8004788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800478c:	e0a5      	b.n	80048da <UART_SetConfig+0x2fe>
 800478e:	2308      	movs	r3, #8
 8004790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004794:	e0a1      	b.n	80048da <UART_SetConfig+0x2fe>
 8004796:	2310      	movs	r3, #16
 8004798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800479c:	e09d      	b.n	80048da <UART_SetConfig+0x2fe>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a4a      	ldr	r2, [pc, #296]	@ (80048cc <UART_SetConfig+0x2f0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d125      	bne.n	80047f4 <UART_SetConfig+0x218>
 80047a8:	4b45      	ldr	r3, [pc, #276]	@ (80048c0 <UART_SetConfig+0x2e4>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80047b4:	d016      	beq.n	80047e4 <UART_SetConfig+0x208>
 80047b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047b8:	d818      	bhi.n	80047ec <UART_SetConfig+0x210>
 80047ba:	2b80      	cmp	r3, #128	@ 0x80
 80047bc:	d00a      	beq.n	80047d4 <UART_SetConfig+0x1f8>
 80047be:	2b80      	cmp	r3, #128	@ 0x80
 80047c0:	d814      	bhi.n	80047ec <UART_SetConfig+0x210>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <UART_SetConfig+0x1f0>
 80047c6:	2b40      	cmp	r3, #64	@ 0x40
 80047c8:	d008      	beq.n	80047dc <UART_SetConfig+0x200>
 80047ca:	e00f      	b.n	80047ec <UART_SetConfig+0x210>
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d2:	e082      	b.n	80048da <UART_SetConfig+0x2fe>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047da:	e07e      	b.n	80048da <UART_SetConfig+0x2fe>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e2:	e07a      	b.n	80048da <UART_SetConfig+0x2fe>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ea:	e076      	b.n	80048da <UART_SetConfig+0x2fe>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f2:	e072      	b.n	80048da <UART_SetConfig+0x2fe>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a35      	ldr	r2, [pc, #212]	@ (80048d0 <UART_SetConfig+0x2f4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d12a      	bne.n	8004854 <UART_SetConfig+0x278>
 80047fe:	4b30      	ldr	r3, [pc, #192]	@ (80048c0 <UART_SetConfig+0x2e4>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004808:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800480c:	d01a      	beq.n	8004844 <UART_SetConfig+0x268>
 800480e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004812:	d81b      	bhi.n	800484c <UART_SetConfig+0x270>
 8004814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004818:	d00c      	beq.n	8004834 <UART_SetConfig+0x258>
 800481a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481e:	d815      	bhi.n	800484c <UART_SetConfig+0x270>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <UART_SetConfig+0x250>
 8004824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004828:	d008      	beq.n	800483c <UART_SetConfig+0x260>
 800482a:	e00f      	b.n	800484c <UART_SetConfig+0x270>
 800482c:	2300      	movs	r3, #0
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004832:	e052      	b.n	80048da <UART_SetConfig+0x2fe>
 8004834:	2302      	movs	r3, #2
 8004836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800483a:	e04e      	b.n	80048da <UART_SetConfig+0x2fe>
 800483c:	2304      	movs	r3, #4
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004842:	e04a      	b.n	80048da <UART_SetConfig+0x2fe>
 8004844:	2308      	movs	r3, #8
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484a:	e046      	b.n	80048da <UART_SetConfig+0x2fe>
 800484c:	2310      	movs	r3, #16
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004852:	e042      	b.n	80048da <UART_SetConfig+0x2fe>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a17      	ldr	r2, [pc, #92]	@ (80048b8 <UART_SetConfig+0x2dc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d13a      	bne.n	80048d4 <UART_SetConfig+0x2f8>
 800485e:	4b18      	ldr	r3, [pc, #96]	@ (80048c0 <UART_SetConfig+0x2e4>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004864:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004868:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800486c:	d01a      	beq.n	80048a4 <UART_SetConfig+0x2c8>
 800486e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004872:	d81b      	bhi.n	80048ac <UART_SetConfig+0x2d0>
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004878:	d00c      	beq.n	8004894 <UART_SetConfig+0x2b8>
 800487a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800487e:	d815      	bhi.n	80048ac <UART_SetConfig+0x2d0>
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <UART_SetConfig+0x2b0>
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004888:	d008      	beq.n	800489c <UART_SetConfig+0x2c0>
 800488a:	e00f      	b.n	80048ac <UART_SetConfig+0x2d0>
 800488c:	2300      	movs	r3, #0
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004892:	e022      	b.n	80048da <UART_SetConfig+0x2fe>
 8004894:	2302      	movs	r3, #2
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800489a:	e01e      	b.n	80048da <UART_SetConfig+0x2fe>
 800489c:	2304      	movs	r3, #4
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a2:	e01a      	b.n	80048da <UART_SetConfig+0x2fe>
 80048a4:	2308      	movs	r3, #8
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048aa:	e016      	b.n	80048da <UART_SetConfig+0x2fe>
 80048ac:	2310      	movs	r3, #16
 80048ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b2:	e012      	b.n	80048da <UART_SetConfig+0x2fe>
 80048b4:	cfff69f3 	.word	0xcfff69f3
 80048b8:	40008000 	.word	0x40008000
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40004400 	.word	0x40004400
 80048c8:	40004800 	.word	0x40004800
 80048cc:	40004c00 	.word	0x40004c00
 80048d0:	40005000 	.word	0x40005000
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4aae      	ldr	r2, [pc, #696]	@ (8004b98 <UART_SetConfig+0x5bc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	f040 8097 	bne.w	8004a14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d823      	bhi.n	8004936 <UART_SetConfig+0x35a>
 80048ee:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <UART_SetConfig+0x318>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004919 	.word	0x08004919
 80048f8:	08004937 	.word	0x08004937
 80048fc:	08004921 	.word	0x08004921
 8004900:	08004937 	.word	0x08004937
 8004904:	08004927 	.word	0x08004927
 8004908:	08004937 	.word	0x08004937
 800490c:	08004937 	.word	0x08004937
 8004910:	08004937 	.word	0x08004937
 8004914:	0800492f 	.word	0x0800492f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004918:	f7fe f898 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 800491c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800491e:	e010      	b.n	8004942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b9e      	ldr	r3, [pc, #632]	@ (8004b9c <UART_SetConfig+0x5c0>)
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004924:	e00d      	b.n	8004942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe f823 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800492a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800492c:	e009      	b.n	8004942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004934:	e005      	b.n	8004942 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8130 	beq.w	8004baa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	4a94      	ldr	r2, [pc, #592]	@ (8004ba0 <UART_SetConfig+0x5c4>)
 8004950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004954:	461a      	mov	r2, r3
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	fbb3 f3f2 	udiv	r3, r3, r2
 800495c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	4413      	add	r3, r2
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	429a      	cmp	r2, r3
 800496c:	d305      	bcc.n	800497a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	429a      	cmp	r2, r3
 8004978:	d903      	bls.n	8004982 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004980:	e113      	b.n	8004baa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004984:	2200      	movs	r2, #0
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	60fa      	str	r2, [r7, #12]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	4a84      	ldr	r2, [pc, #528]	@ (8004ba0 <UART_SetConfig+0x5c4>)
 8004990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004994:	b29b      	uxth	r3, r3
 8004996:	2200      	movs	r2, #0
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049a4:	f7fb fc38 	bl	8000218 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4610      	mov	r0, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	020b      	lsls	r3, r1, #8
 80049ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049be:	0202      	lsls	r2, r0, #8
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	6849      	ldr	r1, [r1, #4]
 80049c4:	0849      	lsrs	r1, r1, #1
 80049c6:	2000      	movs	r0, #0
 80049c8:	460c      	mov	r4, r1
 80049ca:	4605      	mov	r5, r0
 80049cc:	eb12 0804 	adds.w	r8, r2, r4
 80049d0:	eb43 0905 	adc.w	r9, r3, r5
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	469a      	mov	sl, r3
 80049dc:	4693      	mov	fp, r2
 80049de:	4652      	mov	r2, sl
 80049e0:	465b      	mov	r3, fp
 80049e2:	4640      	mov	r0, r8
 80049e4:	4649      	mov	r1, r9
 80049e6:	f7fb fc17 	bl	8000218 <__aeabi_uldivmod>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4613      	mov	r3, r2
 80049f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049f8:	d308      	bcc.n	8004a0c <UART_SetConfig+0x430>
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a00:	d204      	bcs.n	8004a0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a3a      	ldr	r2, [r7, #32]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	e0ce      	b.n	8004baa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a12:	e0ca      	b.n	8004baa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a1c:	d166      	bne.n	8004aec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d827      	bhi.n	8004a76 <UART_SetConfig+0x49a>
 8004a26:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <UART_SetConfig+0x450>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a61 	.word	0x08004a61
 8004a38:	08004a77 	.word	0x08004a77
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004a77 	.word	0x08004a77
 8004a44:	08004a77 	.word	0x08004a77
 8004a48:	08004a77 	.word	0x08004a77
 8004a4c:	08004a6f 	.word	0x08004a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a50:	f7fd fffc 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8004a54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a56:	e014      	b.n	8004a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a58:	f7fe f80e 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8004a5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a5e:	e010      	b.n	8004a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a60:	4b4e      	ldr	r3, [pc, #312]	@ (8004b9c <UART_SetConfig+0x5c0>)
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a64:	e00d      	b.n	8004a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a66:	f7fd ff83 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8004a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a6c:	e009      	b.n	8004a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a74:	e005      	b.n	8004a82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8090 	beq.w	8004baa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	4a44      	ldr	r2, [pc, #272]	@ (8004ba0 <UART_SetConfig+0x5c4>)
 8004a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a9c:	005a      	lsls	r2, r3, #1
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	085b      	lsrs	r3, r3, #1
 8004aa4:	441a      	add	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2b0f      	cmp	r3, #15
 8004ab4:	d916      	bls.n	8004ae4 <UART_SetConfig+0x508>
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004abc:	d212      	bcs.n	8004ae4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f023 030f 	bic.w	r3, r3, #15
 8004ac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	8bfb      	ldrh	r3, [r7, #30]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	8bfa      	ldrh	r2, [r7, #30]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e062      	b.n	8004baa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004aea:	e05e      	b.n	8004baa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d828      	bhi.n	8004b46 <UART_SetConfig+0x56a>
 8004af4:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <UART_SetConfig+0x520>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b47 	.word	0x08004b47
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fd ff94 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8004b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b26:	e014      	b.n	8004b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fd ffa6 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b2e:	e010      	b.n	8004b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b1a      	ldr	r3, [pc, #104]	@ (8004b9c <UART_SetConfig+0x5c0>)
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b34:	e00d      	b.n	8004b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fd ff1b 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8004b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b3c:	e009      	b.n	8004b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b44:	e005      	b.n	8004b52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b50:	bf00      	nop
    }

    if (pclk != 0U)
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d028      	beq.n	8004baa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ba0 <UART_SetConfig+0x5c4>)
 8004b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	441a      	add	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d910      	bls.n	8004ba4 <UART_SetConfig+0x5c8>
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b88:	d20c      	bcs.n	8004ba4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60da      	str	r2, [r3, #12]
 8004b94:	e009      	b.n	8004baa <UART_SetConfig+0x5ce>
 8004b96:	bf00      	nop
 8004b98:	40008000 	.word	0x40008000
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	080052a0 	.word	0x080052a0
      }
      else
      {
        ret = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bc6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3730      	adds	r7, #48	@ 0x30
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01a      	beq.n	8004cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd2:	d10a      	bne.n	8004cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b098      	sub	sp, #96	@ 0x60
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d28:	f7fc fcb0 	bl	800168c <HAL_GetTick>
 8004d2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d12f      	bne.n	8004d9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d44:	2200      	movs	r2, #0
 8004d46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f88e 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d022      	beq.n	8004d9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e063      	b.n	8004e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d149      	bne.n	8004e3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004daa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db2:	2200      	movs	r2, #0
 8004db4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f857 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d03c      	beq.n	8004e3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1e6      	bne.n	8004dc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e16:	61fa      	str	r2, [r7, #28]
 8004e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	69b9      	ldr	r1, [r7, #24]
 8004e1c:	69fa      	ldr	r2, [r7, #28]
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	617b      	str	r3, [r7, #20]
   return(result);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e5      	bne.n	8004df6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e012      	b.n	8004e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3758      	adds	r7, #88	@ 0x58
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	e04f      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e84:	d04b      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e86:	f7fc fc01 	bl	800168c <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e04e      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d037      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b80      	cmp	r3, #128	@ 0x80
 8004eb2:	d034      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b40      	cmp	r3, #64	@ 0x40
 8004eb8:	d031      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d110      	bne.n	8004eea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f838 	bl	8004f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e029      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ef8:	d111      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f81e 	bl	8004f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e00f      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2301      	moveq	r3, #1
 8004f30:	2300      	movne	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d0a0      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b095      	sub	sp, #84	@ 0x54
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e6      	bne.n	8004f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3308      	adds	r3, #8
 8004f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e3      	bne.n	8004f80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d118      	bne.n	8004ff2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f023 0310 	bic.w	r3, r3, #16
 8004fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6979      	ldr	r1, [r7, #20]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	613b      	str	r3, [r7, #16]
   return(result);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e6      	bne.n	8004fc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005006:	bf00      	nop
 8005008:	3754      	adds	r7, #84	@ 0x54
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_UARTEx_DisableFifoMode+0x16>
 8005024:	2302      	movs	r3, #2
 8005026:	e027      	b.n	8005078 <HAL_UARTEx_DisableFifoMode+0x66>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2224      	movs	r2, #36	@ 0x24
 8005034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005098:	2302      	movs	r3, #2
 800509a:	e02d      	b.n	80050f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	@ 0x24
 80050a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0201 	bic.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f84f 	bl	800517c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005114:	2302      	movs	r3, #2
 8005116:	e02d      	b.n	8005174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2224      	movs	r2, #36	@ 0x24
 8005124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f811 	bl	800517c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005188:	2b00      	cmp	r3, #0
 800518a:	d108      	bne.n	800519e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800519c:	e031      	b.n	8005202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800519e:	2308      	movs	r3, #8
 80051a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051a2:	2308      	movs	r3, #8
 80051a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	0e5b      	lsrs	r3, r3, #25
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	0f5b      	lsrs	r3, r3, #29
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f003 0307 	and.w	r3, r3, #7
 80051c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051c6:	7bbb      	ldrb	r3, [r7, #14]
 80051c8:	7b3a      	ldrb	r2, [r7, #12]
 80051ca:	4911      	ldr	r1, [pc, #68]	@ (8005210 <UARTEx_SetNbDataToProcess+0x94>)
 80051cc:	5c8a      	ldrb	r2, [r1, r2]
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051d2:	7b3a      	ldrb	r2, [r7, #12]
 80051d4:	490f      	ldr	r1, [pc, #60]	@ (8005214 <UARTEx_SetNbDataToProcess+0x98>)
 80051d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	7b7a      	ldrb	r2, [r7, #13]
 80051e8:	4909      	ldr	r1, [pc, #36]	@ (8005210 <UARTEx_SetNbDataToProcess+0x94>)
 80051ea:	5c8a      	ldrb	r2, [r1, r2]
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051f0:	7b7a      	ldrb	r2, [r7, #13]
 80051f2:	4908      	ldr	r1, [pc, #32]	@ (8005214 <UARTEx_SetNbDataToProcess+0x98>)
 80051f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	080052b8 	.word	0x080052b8
 8005214:	080052c0 	.word	0x080052c0

08005218 <memset>:
 8005218:	4402      	add	r2, r0
 800521a:	4603      	mov	r3, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4d0d      	ldr	r5, [pc, #52]	@ (8005260 <__libc_init_array+0x38>)
 800522c:	4c0d      	ldr	r4, [pc, #52]	@ (8005264 <__libc_init_array+0x3c>)
 800522e:	1b64      	subs	r4, r4, r5
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	2600      	movs	r6, #0
 8005234:	42a6      	cmp	r6, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	4d0b      	ldr	r5, [pc, #44]	@ (8005268 <__libc_init_array+0x40>)
 800523a:	4c0c      	ldr	r4, [pc, #48]	@ (800526c <__libc_init_array+0x44>)
 800523c:	f000 f818 	bl	8005270 <_init>
 8005240:	1b64      	subs	r4, r4, r5
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	2600      	movs	r6, #0
 8005246:	42a6      	cmp	r6, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005250:	4798      	blx	r3
 8005252:	3601      	adds	r6, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f855 3b04 	ldr.w	r3, [r5], #4
 800525a:	4798      	blx	r3
 800525c:	3601      	adds	r6, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	080052d0 	.word	0x080052d0
 8005264:	080052d0 	.word	0x080052d0
 8005268:	080052d0 	.word	0x080052d0
 800526c:	080052d4 	.word	0x080052d4

08005270 <_init>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr

0800527c <_fini>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr
